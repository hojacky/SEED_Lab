#Names: Group 14
#StateMachine+Aruco+LCD_Demo2
#PYTHON = MASTER
#11/6/2020

# import the necessary packages
import picamera
from picamera.array import PiRGBArray
from picamera import PiCamera, Color
from time import sleep
from PIL import Image
import cv2
import cv2.aruco as aruco
import time
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
import math
import smbus
import time
import board
import busio
import adafruit_character_lcd.character_lcd_rgb_i2c as character_lcd




#-------------------------->>> ARUCO VISION CODE <<<<<-----------------------------#
def angle_detection():
    fov = 54        #field of view of camera
    image_length = 1920     #length of image in px
	f = 1550        #focal length of camera in px
	##########################################
	##########################################
	##########################################
	##########################################
	##########################################
	##########################################
	##########################################
	##########################################
	##########################################
	##########################################
	##########################################
	##########################################
    X_real = 189    #actual length of aruco marker in px CHANGE TO THE ACTUAL LENGTH OF THE MARKER FROM THE DEMO
	##########################################
	##########################################
	##########################################
	##########################################
	##########################################
	##########################################
	##########################################
	##########################################
	##########################################
	##########################################
	##########################################
	##########################################
    
    with picamera.PiCamera() as camera:
        with picamera.array.PiRGBArray(camera) as output:
            #set camera resolution so preview image is same as actual photo
            camera.resolution = (1920, 1088)
                    
            #allow user to know what image is going to be taken
            camera.start_preview()
            sleep(1)
            camera.stop_preview()
                    
            #g is the average awb_gains red and blue values
            g = (1.556, 1.168)
            camera.awb_mode = 'off'
            camera.awb_gains = g
            camera.capture(output, 'rgb')
                    
            #set the image taken to image variable and convert to grayscale
            image = output.array
            image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
                    
            #gathers aruco dictionary and parameters
            aruco_dict = aruco.Dictionary_get(aruco.DICT_6X6_250)
            parameters = aruco.DetectorParameters_create()

            corners, ids, rejectedImgPoints = aruco.detectMarkers(image, aruco_dict, parameters=parameters)
            frame_markers = aruco.drawDetectedMarkers(image.copy(), corners, ids)
                    
            #checks if any aruco markers were detected
            if ids == None:
                print("No markers found.")
				return 100000000, 100000000000
            else:
                print("The IDs for the Aruco Markers are:")
                for i in range(len(ids)):
                    print(ids[i])
					
                for i in range(len(ids)):
                    c = corners[i][0]
					
					#Distance calculation
					#gather position of corners and gets height
					y1 = c[2][1] - c[0][1]
					y2 = c[1][1] - c[3][1]
					#gathers average of both heights
					y = (y1 + y2)/2
					if y < 0:
					y = y * -1
					#solve for distance using perspective projection equation
							#DON'T FORGET TO CHANGE X_real
					Z = f*X_real/y
					#convert pixels to mm
					Z = Z / 3.77953
					print("The distance of id %d is %d mm" %(ids[i], Z))

                    #Angle calculation
                    x_center = (c[0][0] + c[1][0] + c[2][0] + c[3][0])/4
                    deg = (x_center / image_length)*(fov)
                            
                    #check for position of marker on the wheel
                    if deg < 27:
                        deg = -27 + deg
                        print(deg)
                        return deg, Z
                    elif deg > 27:
                        deg = deg - 27
                        print(deg)
                        return deg, Z
                            
            output.truncate(0)

        
if __name__ == '__main__':

    while True:
            
    	angle, distance = aruco_detection()
	
		if (deg < 100000000) and (distance < 100000000000) and (distance > 0):
	
			writeNumber(angle)
			sleep(1)
	
			writeNumber(distance)
			sleep(1)
		
			print("Press any key to take another image.")
			waitKey(0)
	
	else:
		continue

#------------------------------->>> IMPORT COMPUTER LCD CODE HERE<<<<<---------------------------------#
### SUBJECT TO EDITING AS NEEDED ###
# DISPLAY: Distance to Travel, (have arduino send back distance traveled), Angle to Turn, (have arduino send back angle turned)

if __name__ == '__main__':

    while True:
        
        try:
            angle = aruco_detection()
            # Modify this if you have a different sized Character LCD
            lcd_columns = 16
            lcd_rows = 2

            # Initialise I2C bus.
            i2c = busio.I2C(board.SCL, board.SDA)

            # Initialise the LCD class
            lcd = character_lcd.Character_LCD_RGB_I2C(i2c, lcd_columns, lcd_rows)
            lcd.clear()
            # Set LCD color to red
            lcd.color = [100, 0, 0]
            time.sleep(1)

            # Print message on sent value
            scroll_msg1 = ("Angle Detected: "+ str(angle))
            lcd.message = scroll_msg1
            for i in range(len(scroll_msg1)):
                time.sleep(0.5)
                lcd.move_left()
            # Wait 5s
            time.sleep(1)
            # Set LCD color to purple
            lcd.color = [50, 0, 50]
            time.sleep(1)
            #clear before print new message
            lcd.clear()

            # Turn off LCD backlights and clear text
            lcd.color = [0, 0, 0]  
            sleep(2)
            
        except KeyboardInterrupt:
            print("Stopped scanning for Aruco Markers")
            break


#-------------I2C BUS SETUP CAllS ----------------#


#Set up for sending values to Arduino
bus = smbus.SMBus(1)

#This is the I2C Address to Arduino 
address = 0x04

def writeNumber(value):
    bus.write_byte(address,value)    
    #bus.write_byte_data(address,0,value)
    return -1

def readNumber():
    number = bus.read_byte(address)
    # number = bus.read_byte_data(address, 1)
    return number


#### The Read and Write Number functions are unnecessary above and can be copied as needed into each class that sends data below ###


#-------------STATE MACHINE ----------------#
class State():  # This machine is the Master and will be sending commands to the arduino to execute 

    def locate():
  
        # Find location? Idk if we actually need this one tbh. Let me know what you think

    def turning(): # We will have the arduino ready to read-in either a 1,2,3 code and if it recieives a one it enters the arduino loop to turn, etc. 
  
        #Send Code 1 to indicate it is about to send angle to turn
        encode_m1 = 1  
        def writeNumberone(encode_m1):
            bus.write_byte(address,encode_m1)  
            return -1

        #Send angle as soon as 1 is recieved 
        def writeAngle(angle):
            bus.write_byte(address,angle)
            return -1


    def straight():
  
        #Send Code 2 to indicate it is about to go straight and send distance
        encode_m2 = 2  
      	def writeNumberone(encode_m2):
            bus.write_byte(address,encode_m2)  
            return -1

        #Send distance as soon as 1 is recieved 
        def writeAngle(distance):    #################### Idk what variable you assigned to deisred distance
            bus.write_byte(address,distance)
            return -1

 
    def endit():
        # Send code 3 so it knows it will be disabling motors 
        encode_m3 = 3  
        def writeNumberone(encode_m3):
            bus.write_byte(address,encode_m3)  
            return -1

        # Send values to disable motors -> ASK MANDY ABOUT DISABLING MOTORS 
      
        #Recieve Code from Arduino to display LCD Values 
        def readNumber():
    	    endvalue = bus.read_byte(address)
            return endvalue

        if endvalue == 4: 
            #Execute LCD display

      


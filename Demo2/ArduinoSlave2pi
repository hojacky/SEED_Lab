// Name: Group14
// ARDUINO SLAVE CODE

#include <Encoder.h>
#include <Wire.h>

#define PI 3.1415926535897932384626433832795
#define SLAVE_ADDRESS 0x04  


//----------------------DECLARE GLOBAL VARIABLES -----------------------//

//WHEEL SPECS
const double WheelRadius = 0.245;// radius of wheel need to measure also units?
const double axleRadius = 0.323;//need to measure

// PID CONTROLLER VALUES
double Kp = 1.5;    //5.5; //V/rad
double Kd = 0.5;    //0.5; //V/mil/rad
double Ki = 0.0001; //0.0001; //V/rad*mil

//MOTOR DRIVER VARIABLES
int newPos = 0;
int phiold = 0;
int expected_pos;
bool turn = 1;
bool straight = 0;
bool circle = 0;

//Timing values(1/motor)
int TsL = 50;
int TsR = 0;

//Error Values
double lefterror = 0;
double righterror = 0;


//Motor Encoder Pin Setup
Encoder motorEncoder(2, 5);
Encoder motorEncoder2(3, 6);


//I2C Data Recieved
double received; 
double des_angle;  // angle sent from I2C
double curr_angle; // Calculated angle of robot 
double dist_aruco; // Distance from Aruco? 
double enddata = 4; // Data sent back to pi when done running



//-----------------------SETUP LOOP DECLARATIONS ----------------------//

void setup() {

  Serial.begin(9600);
  Wire.begin(SLAVE_ADDRESS); // OPEN i2C BUS -> LOOKING TO RECIEVE IN LOOP()
  
//---------------------- PIN CONFIGURATION-----------------------------//

//set pins 4,7,8,9,10 as output
    pinMode(4, OUTPUT);
    pinMode(7, OUTPUT);
    pinMode(8, OUTPUT);
    pinMode(9, OUTPUT);
    pinMode(10, OUTPUT);
    pinMode(6,OUTPUT);
    digitalWrite(6, HIGH);
//set the enable pins high
    digitalWrite(4, HIGH);
    digitalWrite(7, HIGH);
    digitalWrite(8, HIGH);
    analogWrite(9, LOW);
    analogWrite(10, LOW);
//set pin 12 to input
    pinMode(12, INPUT);
  
  
}


//-------------------------MAIN LOOP STARTS --------------------------//

void loop(){
  
  //TIMING VARIABLE DECLARED
  Ts = millis();

  //OPEN I2C to RECIEVE
  received = Wire.onReceive(receiveData);
  
//---------------- ANGLE COMMANDS & Function Calls : MESSAGE 1 --------------------// 

  //1) RECIEVES DESIRED ANGLE,  
  //2) UPDATE ANGLE POS VARIABLE( based off velocity?)(actual angle)
      //Know Angle of Robot and X-y position of center point 
      // X,Y,& Phi
  //3) CALC CURRENT POS (change in encoder pulses)
  //4) proportional control -> Subtract (actual - desired angle)*Kp = Write to each wheel  -> Proportional control (higher Kp higher change)
  

   if received == 1 
   {        
             //STEP 1: RECIEVE DESIRED ANGLE FROM PI
             des_angle = Wire.onReceive(receiveData); // Angle Sent Via I2C ------------------???? Angle sent in Radians????

          
            //STEP 2: Calculating Velocity: Updating Position of Robot Variable?
             velocity_L = ((motorEncoder.read()/1600*PI) - distance)/Ts; //rad/mil
             velocity_R = ((motorEncoder2.read()/1600*PI) - distance)/Ts; //rad/mil     //--------->>> What is distance??
             
             //STEP 3:CALC CURRENT POS: Current position of robot?
             // calculate x and Y values for where the robot is starting at the origin?
            // curr_angle = ??
       

            //Calc Errors ------------------------------------------------> Not sure if this is needed ? 
            lefterror = angularDistance - y_L;
            righterror = angularDistance - y_R;

            //STEP 4: PID CONTROLLER OUTPUT 
            left_wheelwrite = (curr_angle - des_angle)*Kp; 
            right_wheelwrite = -(curr_angle - des_angle)*Kp;
            // How to write that to motors? 
              
              
            //Wait for next command Delay
            delay(50-(Ts));
}

//--------------------STRAIGHT COMMANDS & Function Calls: MESSAGE 2 ---------------------//

// if received == 2{
      dist_aruco = Wire.onReceive(receiveData);



}


}

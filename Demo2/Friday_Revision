//SEED_LAB group 14 Arduino motor reading and spinning - Demo 2

#include <Encoder.h>
#include <Wire.h>

//PWM motor pins
#define LEFTMOTORPWM 9
#define RIGHTMOTORPWM 10

//directional motor pins
#define LEFTDIRECTONPIN 7
#define RIGHTDIRECTIONPIN 8

//Other defined constants
#define PI 3.1415926535897932384626433832795
#define SLAVE_ADDRESS 0x04 
#define POWERPIN 6

double distance = 2658;//((2658/(2*PI*0.245))/1600)*PI;//3ft
//double distance = 13290;//5ft
//double distance = 19606;//7ft
//double angularDistance = 150;//90 deg 
double angularDistance = 255;//135 deg
//double angularDistance = 353;// 180 deg
const double WheelRadius = 0.245;// radius of wheel(meters)
double D_L = 0;
double D_R = 0;
double leftControllerOutput;
double rightControllerOutput;
double leftAngularOutput;
double rightAngularOutput;
//PID values
double Kp = 1.5;    //5.5; //V/rad
double Kd = 0.5;    //0.5; //V/mil/rad
double Ki = 0.0001; //0.0001; //V/rad*mil
double I_L = 0;
double I_R;
double e_Lpast;
double e_Rpast;
int Ts = 50;
double Tc = 0;
double lefterror = 0;
double righterror = 0;
double strErr_L = 0;
double strErr_R = 0;
double r_L = 0; //quadrant;
double r_R = 0; //quadrant;
double y_L = 0;
double y_R = 0;
double Tc2 = 0;
double angle = 0;
double pi_distance = 0;
double leftAngleRad = 0;
double rightAngleRad = 0;
  
//Motor Driver Variables 
int newPos = 0;
int phiold = 0;
int expected_pos;
bool turn = 0;
bool straight = 0;
int circle = 0;

//set up encoder pins
Encoder motorEncoder(2, 5);
Encoder motorEncoder2(3, 6);
  
void setup() {
  Serial.begin(9600);
  
  //Open i2C
  Wire.begin(SLAVE_ADDRESS);
  
  //Wire.onReceive(receiveData);
  //  Wire.onRequest(sendData);
  
  //Turn distance from feet into radians
  distance = (distance/(2*PI*WheelRadius));
  distance = (distance/1600)*PI;  
  
  //set pins 4,7,8,9,10 as output
  pinMode(4, OUTPUT);
  pinMode(LEFTDIRECTIONPIN, OUTPUT);
  pinMode(RIGHTDIRECTOINPIN, OUTPUT);
  pinMode(LEFTMOTORPWM, OUTPUT);
  pinMode(RIGHTMOTORPWM, OUTPUT);
  
  //Write the power pin to 5V
  pinMode(POWERPIN,OUTPUT);
  digitalWrite(POWERPIN, HIGH);
  
  //set the enable pins 
  digitalWrite(4, HIGH);
  digitalWrite(LEFTDIRECTIONPIN, HIGH);
  digitalWrite(RIGHTDIRECTIONPIN, HIGH);
  analogWrite(LEFTMOTORPIN, LOW);
  analogWrite(RIGHTMOTORPIN, LOW);
  
  //set pin 12 to input
  pinMode(12, INPUT);
  
   //Turn angle from degrees to radians
  angularDistance = (angularDistance*PI)/180; 
  
  //turn if there is a given angle
  if(angularDistance != 0){
  ////////////////////////////////////////////////
  //////////////////////////////////////////////
  ////////////what does changing r_R do?//////
  ////////////////////////////////////////////////
  //////////////////////////////////////////////
    r_L = angularDistance;
    r_R = angularDistance;
    turn = 1;
    straight = 0;
    }
    else {
      turn = 0;
      r_L = Distance;
      r_R = Distance;
      }
  
  //set the desired angular distance and read in current motor encodercounts
  y_L = motorEncoder.read();
  y_R = motorEncoder2.read();

  //set up interrupt functions for each motor
  attachInterrupt(digitalPinToInterrupt(2),leftInterrupt,CHANGE);
  attachInterrupt(digitalPinToInterrupt(3),rightInterrupt,CHANGE);

}

//Make sure the received variables are correct
//void receiveData(double){
//  angle = Wire.read();
//  pi_distance = Wire.read();
//  circle = 1;
//}

//Desired position is set to last position, last position is set to current position
void leftInterrupt(){
  r_L = y_L;
  y_L = motorEncoder.read();
}

//same as left interrupt
void rightInterrupt(){
    r_R = y_R;
    y_R = motorEncoder2.read();
}

void turnFunc(double ang){
  Tc = millis();

  Serial.println("turn");

  leftAngleRad = (y_L/1600)*PI;
  rightAngleRad = (y_R/1600)*PI;

  lefterror = ang - leftAngleRad;
  righterror = ang - rightAngleRad;
  
  //If error drops below the threshhold, turn off the motors 
  if ((lefterror < 0.5) && (righterror < 0.5)){
    analogWrite(RIGHTMOTORPWM,LOW);
    analogWrite(LEFTMOTORPWM,HIGH);
    motorEncoder.write(0);
    motorEncoder2.write(0);
    
    //What are these here for?
    I_L = 0;
    I_R = 0;
    
    //setup for straight function
    turn = 0;
    straight = 1;
    r_L = distance;
    r_R = distance;
	
	if(circle > 1){
		circle++;
		straight = 0;
	}
    
    //Break out of function...does this actually break us?
    return;
  }
  
  //Error calculations
  D_L = (y_L - r_L)/Ts; //rad/mil
  D_R = (y_R - r_R)/Ts; //rad/mil

  I_L = I_L + (Ts*lefterror); //rad*mil
  I_R = I_R + (Ts*righterror); //rad*mil
  
  //PWM output is equal to the sum of the errors
  leftControllerOutput = (Kp*lefterror);//+ (Ki*I_L) + (Kd*D_L);  
  rightControllerOutput = (Kp*righterror);//+ (Ki*I_R) + (Kd*D_R); 
  
  //check the edge cases of the battery capacity
  if (signbit(leftControllerOutput)) {
      if (abs(leftControllerOutput) > 8.5) {
        leftControllerOutput = -8.5;
      }
  } 
  else if (abs(leftControllerOutput) > 8.5) {
      leftControllerOutput = 8.5;
  }

  if (signbit(rightControllerOutput)){
      if (abs(rightControllerOutput) > 8.5) {
        rightControllerOutput = -8.5;
      }
  } 
  else if (abs(rightControllerOutput) > 8.5) {
      rightControllerOutput = 8.5;
  }
  
  //Check angle value for direction of turn
  if (ang < 0){
    if(leftControllerOutput > 0) { 
        digitalWrite(LEFTDIRECTIONPIN, LOW);
    }
    else {
        digitalWrite(LEFTDIRECTIONPIN, HIGH);
    }

    if(rightControllerOutput < 0) {
        digitalWrite(RIGHTDIRECTIONPIN, LOW);
    }
    else {
        digitalWrite(RIGHTDIRECTIONPIN, HIGH);
    }
  }
  
  else if(ang > 0){
    if(leftControllerOutput < 0) { 
        digitalWrite(LEFTDIRECTIONPIN, LOW);
    }
    else {
        digitalWrite(LEFTDIRECTIONPIN, HIGH);
    }

    if(rightControllerOutput > 0) {
        digitalWrite(RIGHTDIRECTIONPIN, LOW);
    }
    else {
        digitalWrite(RIGHTDIRECTIONPIN, HIGH);
    }
  }

  //check edge cases of the PWM output
  leftControllerOutput = abs(leftControllerOutput);
  leftControllerOutput = (leftControllerOutput/8.5)*255;
  if(leftControllerOutput > 255) {
    leftControllerOutput = 255;
  }

  rightControllerOutput = abs(rightControllerOutput);
  rightControllerOutput = (rightControllerOutput/8.5)*255;
  if(rightControllerOutput > 255) {
    rightControllerOutput = 255;
  }
  
  //This is here to ensure the pins go the opposite directions, but it needs to not be. We will always go left if this is here
  //digitalWrite(7, HIGH);
  
  //turn the motors
  analogWrite(9,leftControllerOutput);
  analogWrite(10,rightControllerOutput);

  //handle the timing
  Tc2 = millis();
  delay(50-(Tc2-Tc));

}

void straightFunc(double pi_dist){

  Tc = millis();
  
  Serial.println("straight");
  
  //Everything in radians
  y_L = (y_L/1600)*PI;
  y_R = (y_R/1600)*PI;
  
  //error calculation
  strErr_L = pi_dist + y_L;
  strErr_R = pi_dist - y_R;
  
  
  //check if error is small enough
  if ((strErr_L < 0.5) && (strErr_R < 0.5)) {
    straight = 0;
    turn = 0;
    circle++;
    
    analogWrite(RIGHTMOTORPWM,0);
    analogWrite(LEFTMOTORPWM,0);
    motorEncoder.write(0);
    motorEncoder2.write(0);
    return;
  }
    
    //Error calculations...is this how we calculate?
    D_L = (strErr_L - e_Lpast)/Ts; //rad/mil
    e_Lpast = strErr_L;
    D_R = (strErr_R - e_Rpast)/Ts; //rad/mil
    e_Rpast = strErr_R;
   
    if (strErr_L < 0){
      leftControllerOutput = 0;
    }
  else{
        I_L = I_L + (Ts*strErr_L); //rad*mil
        leftControllerOutput = (Kp*strErr_L);// + (Ki*I_L) + (Kd*D_L)));
    }
    if (strErr_R < 0){
      rightControllerOutput = 0;
    }
  else{
      I_R = I_R + (Ts*strErr_R); //rad*mil
      rightControllerOutput = (Kp*strErr_R);// + (Ki*I_R) + (Kd*D_R);
    } 
   
    if(leftControllerOutput > 0){
      digitalWrite(LEFTDIRECTIONPIN, LOW);
    }
  else{
      digitalWrite(LEFTDIRECTIONPIN, HIGH);
    }
   
    leftControllerOutput = abs(leftControllerOutput);
    leftControllerOutput = (leftControllerOutput/8.5)*255;
    if(leftControllerOutput > 255){
      leftControllerOutput = 255;
    }
    rightControllerOutput = abs(rightControllerOutput);
    rightControllerOutput = (rightControllerOutput/8.5)*255;
    if(rightControllerOutput > 255){
      rightControllerOutput = 255;
    }
  
    analogWrite(LEFTMOTORPWM,leftControllerOutput);
    analogWrite(RIGHTMOTORPWM,rightControllerOutput);
   
    Tc2 = millis();
    delay(50-(Tc2-Tc));
}

void loop(){

  if (turn){
    turnFunc(angularDistance);
	delay(3000);
  }
  else if(straight){
    straightFunc(distance);
	delay(3000);
  }
  else if(circle > 0){
  
  	//turn right 90 
    if(circle == 1){
    	angularDistance = (150*PI)/180;   //Convert to radians
    	turnFunc(angularDistance);
   	 	delay(3000);
	}
    
    //go forward half a foot
	if(circle == 2){
    	distance = (1329/(2*PI*WheelRadius));
    	distance = (distance/1600)*PI;
    	straightFunc(distance);
    	delay(3000);
	}
    
    //turn left 90
	if(circle == 3){
		angularDistance = (-150*PI)/180;
		turnFunc(angularDistance);
		delay(3000);
	}
    
    //go forward a foot 
	if(circle == 4){
		distance = (2658/(2*PI*WheelRadius));
		distance = (distance/1600)*PI;
		straightFunc(distance);
		delay(3000);
	}
    
    //turn left 90
	if(circle == 5){
		angularDistance = (-150*PI)/180;
		turnFunc(angularDistance);
		delay(3000);
	}
    
    //go forward a foot 
	if(circle == 6){
		distance = (2658/(2*PI*WheelRadius));
		distance = (distance/1600)*PI;
		straightFunc(distance);
		delay(3000);
	}
    
    //turn left 90
	if(circle == 7){
		angularDistance = (-150*PI)/180;
		turnFunc(angularDistance);
		delay(3000);
	}
    
    //go forward a foot
	if(circle == 8){
		distance = (2658/(2*PI*WheelRadius));
		distance = (distance/1600)*PI;
		straightFunc(distance);
		delay(3000);
	}
	
	//turn left 90
	if(circle == 9){
		angularDistance = (-150*PI)/180;
		turnFunc(angularDistance);
		delay(3000);
	}
	
	//go forward half a foot
	if(circle == 10){
		distance = (1329/(2*PI*WheelRadius));
		distance = (distance/1600)*PI;
		straightFunc(distance);
		delay(3000);
	}
    
  }
}
